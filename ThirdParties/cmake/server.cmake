# rpclib
set(OLD_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
set(OLD_CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
set(RPCLIB_SERVER_BUILD_DIR ${SERVER_BUILD_DIR}/rpclib)
file(MAKE_DIRECTORY ${RPCLIB_SERVER_BUILD_DIR})

set(SERVER_CMAKE_CXX_FLAGS "-fPIC -std=c++14 -stdlib=libc++ -I${LLVM_INCLUDE} -Wl,-L${LLVM_LIBPATH} -DBOOST_NO_EXCEPTIONS -DASIO_NO_EXCEPTIONS ${UNREAL_HOSTED_CFLAGS}")


# for server
add_custom_target(
    build_rpclib_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        ${CMAKE_COMMAND}
        -DCMAKE_CXX_FLAGS=${libstdcxx_CMAKE_CXX_FLAGS}
        -DCMAKE_INSTALL_PREFIX=${RPCLIB_SERVER_INSTALL_DIR}
        ${RPCLIB_SRC}
    WORKING_DIRECTORY ${RPCLIB_SERVER_BUILD_DIR}
)

add_custom_target(
    install_rpclib_server
    DEPENDS build_rpclib_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        make install -j ${CARLA_BUILD_CONCURRENCY}
    WORKING_DIRECTORY ${RPCLIB_SERVER_BUILD_DIR}
)

# recover cmake var
set(CMAKE_CXX_FLAGS ${OLD_CMAKE_CXX_FLAGS})
set(CMAKE_INSTALL_PREFIX ${OLD_CMAKE_INSTALL_PREFIX})


# gtest
set(OLD_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
set(OLD_CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
set(GTEST_SERVER_BUILD_DIR ${SERVER_BUILD_DIR}/googletest)
file(MAKE_DIRECTORY ${GTEST_SERVER_BUILD_DIR})

set(CMAKE_CXX_FLAGS "-std=c++14 -stdlib=libc++ -I${LLVM_INCLUDE} -Wl,-L${LLVM_LIBPATH} -DBOOST_NO_EXCEPTIONS -fno-exceptions ${UNREAL_HOSTED_CFLAGS}")

add_custom_target(
    build_gtest_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        ${CMAKE_COMMAND}
        -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
        -DCMAKE_INSTALL_PREFIX=${GTEST_SERVER_INSTALL_DIR}
        ${GTEST_SRC}
    WORKING_DIRECTORY ${GTEST_SERVER_BUILD_DIR}
)


add_custom_target(
    install_gtest_server
    DEPENDS build_gtest_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        make install -j ${CARLA_BUILD_CONCURRENCY}
    WORKING_DIRECTORY ${GTEST_SERVER_BUILD_DIR}
)

# recover cmake var
set(CMAKE_CXX_FLAGS ${OLD_CMAKE_CXX_FLAGS})
set(CMAKE_INSTALL_PREFIX ${OLD_CMAKE_INSTALL_PREFIX})


# libxerces
set(OLD_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
set(OLD_CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
set(XERCES_SERVER_BUILD_DIR ${SERVER_BUILD_DIR}/xerces)
file(MAKE_DIRECTORY ${XERCES_SERVER_BUILD_DIR})


set(CMAKE_CXX_FLAGS "-std=c++14 -stdlib=libc++ -fPIC -w -I${LLVM_INCLUDE} -Wl,-L${LLVM_LIBPATH}")
set(CMAKE_BUILD_TYPE Release)
set(BUILD_SHARED_LIBS OFF)
set(transcoder gnuiconv)
set(network OFF)

add_custom_target(
    build_xerces_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        ${CMAKE_COMMAND}
        -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
        -DCMAKE_INSTALL_PREFIX=${XERCES_SERVER_INSTALL_DIR}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}
        -Dtranscoder=${transcoder}
        -Dnetwork=${network}
        ${XERCES_SRC}
    WORKING_DIRECTORY ${XERCES_SERVER_BUILD_DIR}
)


add_custom_target(
    install_xerces_server
    DEPENDS build_xerces_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        make install -j ${CARLA_BUILD_CONCURRENCY}
    WORKING_DIRECTORY ${XERCES_SERVER_BUILD_DIR}
)

# recover cmake var
set(CMAKE_CXX_FLAGS ${OLD_CMAKE_CXX_FLAGS})
set(CMAKE_INSTALL_PREFIX ${OLD_CMAKE_INSTALL_PREFIX})


# eigen
set(EIGEN_SERVER_INSTALL_INCLUDE_DIR ${EIGEN_SERVER_INSTALL_DIR}/include)

add_custom_target(
    install_eigen_server
    COMMAND mkdir -p ${EIGEN_SERVER_INSTALL_INCLUDE_DIR}/unsupported/Eigen
    COMMAND cp -R ${EIGEN_SRC}/Eigen ${EIGEN_SERVER_INSTALL_INCLUDE_DIR}
    COMMAND cp -R ${EIGEN_SRC}/unsupported/Eigen ${EIGEN_SERVER_INSTALL_INCLUDE_DIR}/unsupported
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
)


# Chrono
set(OLD_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
set(OLD_CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})

# install eigen for chrono
set(EIGEN_FOR_CHRONO_INSTALL_DIR ${SERVER_INSTALL_DIR}/eigen-for-chrono)
set(EIGEN_FOR_CHRONO_INSTALL_INCLUDE_DIR ${EIGEN_FOR_CHRONO_INSTALL_DIR}/include)
set(CHRONO_SERVER_BUILD_DIR ${SERVER_BUILD_DIR}/chrono)
file(MAKE_DIRECTORY ${CHRONO_SERVER_BUILD_DIR})

add_custom_target(
    install_eigen4chrono_server
    COMMAND mkdir -p ${EIGEN_FOR_CHRONO_INSTALL_INCLUDE_DIR}/unsupported/Eigen
    COMMAND cp -R ${EIGEN_CHRONO_SRC}/Eigen ${EIGEN_FOR_CHRONO_INSTALL_INCLUDE_DIR}
    COMMAND cp -R ${EIGEN_CHRONO_SRC}/unsupported/Eigen ${EIGEN_FOR_CHRONO_INSTALL_INCLUDE_DIR}/unsupported
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
)

# build and install chrono
set(CMAKE_CXX_FLAGS "-fPIC -std=c++14 -stdlib=libc++ -I${LLVM_INCLUDE} -Wl,-L${LLVM_LIBPATH} -Wno-unused-command-line-argument ${UNREAL_HOSTED_CFLAGS}")
set(CMAKE_BUILD_TYPE Release)
set(ENABLE_MODULE_VEHICLE ON)

add_custom_target(
    build_chrono_server
    DEPENDS install_eigen4chrono_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        ${CMAKE_COMMAND}
        -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
        -DEIGEN3_INCLUDE_DIR=${EIGEN_FOR_CHRONO_INSTALL_INCLUDE_DIR}
        -DCMAKE_INSTALL_PREFIX=${CHRONO_SERVER_INSTALL_DIR}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DENABLE_MODULE_VEHICLE=${ENABLE_MODULE_VEHICLE}
        ${CHRONO_SRC}
    WORKING_DIRECTORY ${CHRONO_SERVER_BUILD_DIR}
)

add_custom_target(
    install_chrono_server
    DEPENDS build_chrono_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        make install -j ${CARLA_BUILD_CONCURRENCY}
    WORKING_DIRECTORY ${CHRONO_SERVER_BUILD_DIR}
)


# recover cmake var
set(CMAKE_CXX_FLAGS ${OLD_CMAKE_CXX_FLAGS})
set(CMAKE_INSTALL_PREFIX ${OLD_CMAKE_INSTALL_PREFIX})


# Sqlite3
file(COPY ${SQLITE_SRC} DESTINATION ${SERVER_BUILD_DIR})
set(SQLITE_SRC_BAK ${SERVER_BUILD_DIR}/sqlite-carla)


add_custom_target(
    build_sqlite_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};CFLAGS="-fPIC";
        ./configure --prefix=${SQLITE_SERVER_INSTALL_DIR} &&
        make -j ${CARLA_BUILD_CONCURRENCY}
    WORKING_DIRECTORY ${SQLITE_SRC_BAK}
)

add_custom_target(
    install_sqlite_server
    DEPENDS build_sqlite_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};CFLAGS="-fPIC";
        make install
    WORKING_DIRECTORY ${SQLITE_SRC_BAK}
)


# proj
set(OLD_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
set(OLD_CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
set(PROJ_SERVER_BUILD_DIR ${SERVER_BUILD_DIR}/proj)
file(MAKE_DIRECTORY ${PROJ_SERVER_BUILD_DIR})

set(CMAKE_CXX_FLAGS "-std=c++14 -fPIC -stdlib=libc++ -I${LLVM_INCLUDE} -Wl,-L${LLVM_LIBPATH}")
set(SQLITE3_SERVER_INCLUDE_DIR ${SQLITE_SERVER_INSTALL_DIR}/include)
set(SQLITE3_SERVER_LIBRARY ${SQLITE_SERVER_INSTALL_DIR}/lib/libsqlite3.a)
set(SQLITE3_SERVER_EXE ${SQLITE_SERVER_INSTALL_DIR}/bin/sqlite3)
set(PROJ_SERVER_ENABLE_TIFF OFF)
set(PROJ_SERVER_ENABLE_CURL OFF)
set(PROJ_SERVER_BUILD_SHARED_LIBS OFF)
set(PROJ_SERVER_BUILD_PROJSYNC OFF)
set(PROJ_SERVER_CMAKE_BUILD_TYPE Release)
set(PROJ_SERVER_BUILD_PROJINFO OFF)
set(PROJ_SERVER_BUILD_CCT OFF)
set(PROJ_SERVER_BUILD_CS2CS OFF)
set(PROJ_SERVER_BUILD_GEOD OFF)
set(PROJ_SERVER_BUILD_GIE OFF)
set(PROJ_SERVER_BUILD_PROJ OFF)
set(PROJ_SERVER_BUILD_TESTING OFF)

add_custom_target(
    build_proj_server
    DEPENDS install_sqlite_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        ${CMAKE_COMMAND}
        -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
        -DSQLITE3_INCLUDE_DIR=${SQLITE3_SERVER_INCLUDE_DIR}
        -DSQLITE3_LIBRARY=${SQLITE3_SERVER_LIBRARY}
        -DEXE_SQLITE3=${SQLITE3_SERVER_EXE}
        -DENABLE_TIFF=${PROJ_SERVER_ENABLE_TIFF}
        -DENABLE_CURL=${PROJ_SERVER_ENABLE_CURL}
        -DBUILD_SHARED_LIBS=${PROJ_SERVER_BUILD_SHARED_LIBS}
        -DBUILD_PROJSYNC=${PROJ_SERVER_BUILD_PROJSYNC}
        -DCMAKE_BUILD_TYPE=${PROJ_SERVER_CMAKE_BUILD_TYPE}
        -DBUILD_PROJINFO=${PROJ_SERVER_BUILD_PROJINFO}
        -DBUILD_CCT=${PROJ_SERVER_BUILD_CCT}
        -DBUILD_CS2CS=${PROJ_SERVER_BUILD_CS2CS}
        -DBUILD_GEOD=${PROJ_SERVER_BUILD_GEOD}
        -DBUILD_GIE=${PROJ_SERVER_BUILD_GIE}
        -DBUILD_PROJ=${PROJ_SERVER_BUILD_PROJ}
        -DBUILD_TESTING=${PROJ_SERVER_BUILD_TESTING}
        -DCMAKE_INSTALL_PREFIX=${PROJ_SERVER_INSTALL_DIR}
        ${PROJ_SRC}
    WORKING_DIRECTORY ${PROJ_SERVER_BUILD_DIR}
)

add_custom_target(
    install_proj_server
    DEPENDS build_proj_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        make install -j ${CARLA_BUILD_CONCURRENCY}
    WORKING_DIRECTORY ${PROJ_SERVER_BUILD_DIR}
)


# patchelf
file(COPY ${PATCHELF_SRC} DESTINATION ${SERVER_BUILD_DIR})
set(PATCHELF_SRC_BAK ${SERVER_BUILD_DIR}/patchelf)

add_custom_target(
    build_patchelf_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        ./bootstrap.sh &&
        ./configure --prefix=${PATCHELF_SERVER_INSTALL_DIR}
    WORKING_DIRECTORY ${PATCHELF_SRC_BAK}
)

add_custom_target(
    install_patchelf_server
    DEPENDS build_patchelf_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        make -j ${CARLA_BUILD_CONCURRENCY} && make install
    WORKING_DIRECTORY ${PATCHELF_SRC_BAK}
)


# OSM2ODR
set(OSM2ODR_SERVER_BUILD_DIR ${SERVER_BUILD_DIR}/sumo)
file(MAKE_DIRECTORY ${OSM2ODR_SERVER_BUILD_DIR})

# for server
set(SERVER_G "Eclipse CDT4 - Unix Makefiles")
set(SERVER_CMAKE_CXX_FLAGS "-fPIC -std=c++14 -stdlib=libc++ -I${LLVM_INCLUDE} -Wl,-L${LLVM_LIBPATH}")
set(SERVER_CMAKE_INSTALL_PREFIX ${LIBCARLA_SERVER_INSTALL_DIR})
set(SERVER_PROJ_INCLUDE_DIR ${PROJ_SERVER_INSTALL_DIR}/include)
set(SERVER_PROJ_LIBRARY ${PROJ_SERVER_INSTALL_DIR}/lib/libproj.a)
set(SERVER_XERCES_INCLUDE_DIR ${XERCES_SERVER_INSTALL_DIR}/include)
set(SERVER_XERCES_LIBRARY ${XERCES_SERVER_INSTALL_DIR}/lib/libxerces-c.a)

add_custom_target(
    build_osm2odr_server
    DEPENDS install_proj_server install_xerces_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        ${CMAKE_COMMAND}
        -G ${SERVER_G}
        -DCMAKE_CXX_FLAGS=${SERVER_CMAKE_CXX_FLAGS}
        -DCMAKE_INSTALL_PREFIX=${SERVER_CMAKE_INSTALL_PREFIX}
        -DPROJ_INCLUDE_DIR=${SERVER_PROJ_INCLUDE_DIR}
        -DPROJ_LIBRARY=${SERVER_PROJ_LIBRARY}
        -DXercesC_INCLUDE_DIR=${SERVER_XERCES_INCLUDE_DIR}
        -DXercesC_LIBRARY=${SERVER_XERCES_LIBRARY}
        ${SUMO_SRC}
    WORKING_DIRECTORY ${OSM2ODR_SERVER_BUILD_DIR}
)

add_custom_target(
    install_osm2odr_server
    DEPENDS build_osm2odr_server
    COMMAND CC=$ENV{CC};CXX=$ENV{CXX};PATH=$ENV{PATH};
        make install -j ${CARLA_BUILD_CONCURRENCY}
    WORKING_DIRECTORY ${OSM2ODR_SERVER_BUILD_DIR}
)


# all

add_custom_target(
    third_party_server
    DEPENDS install_rpclib_server install_gtest_server
            install_eigen_server install_chrono_server install_xerces_server
            install_sqlite_server install_patchelf_server install_osm2odr_server
    COMMAND mkdir -p ${LIBCARLA_SERVER_INSTALL_DIR}/include
    COMMAND mkdir -p ${LIBCARLA_SERVER_INSTALL_DIR}/lib
    # include
    COMMAND cp -R ${RPCLIB_SERVER_INSTALL_DIR}/include/*  ${LIBCARLA_SERVER_INSTALL_DIR}/include
    COMMAND cp -R ${GTEST_SERVER_INSTALL_DIR}/include/*  ${LIBCARLA_SERVER_INSTALL_DIR}/include
    COMMAND cp -R ${SQLITE_SERVER_INSTALL_DIR}/include/*  ${LIBCARLA_SERVER_INSTALL_DIR}/include
    COMMAND cp -R ${EIGEN_SERVER_INSTALL_DIR}/include/*  ${LIBCARLA_SERVER_INSTALL_DIR}/include
    COMMAND cp -R ${PROJ_SERVER_INSTALL_DIR}/include/*  ${LIBCARLA_SERVER_INSTALL_DIR}/include
    # COMMAND cp -R ${PATCHELF_SERVER_INSTALL_DIR}/include/*  ${LIBCARLA_SERVER_INSTALL_DIR}/include
    COMMAND cp -R ${XERCES_SERVER_INSTALL_DIR}/include/*  ${LIBCARLA_SERVER_INSTALL_DIR}/include
    COMMAND cp -R ${CHRONO_SERVER_INSTALL_DIR}/include/*  ${LIBCARLA_SERVER_INSTALL_DIR}/include
    # lib
    COMMAND cp -R ${RPCLIB_SERVER_INSTALL_DIR}/lib/*  ${LIBCARLA_SERVER_INSTALL_DIR}/lib
    COMMAND cp -R ${GTEST_SERVER_INSTALL_DIR}/lib/*  ${LIBCARLA_SERVER_INSTALL_DIR}/lib
    COMMAND cp -R ${SQLITE_SERVER_INSTALL_DIR}/lib/*  ${LIBCARLA_SERVER_INSTALL_DIR}/lib
    # COMMAND cp -R ${EIGEN_SERVER_INSTALL_DIR}/lib/*  ${LIBCARLA_SERVER_INSTALL_DIR}/lib
    COMMAND cp -R ${PROJ_SERVER_INSTALL_DIR}/lib/*  ${LIBCARLA_SERVER_INSTALL_DIR}/lib
    # COMMAND cp -R ${PATCHELF_SERVER_INSTALL_DIR}/lib/*  ${LIBCARLA_SERVER_INSTALL_DIR}/lib
    COMMAND cp -R ${XERCES_SERVER_INSTALL_DIR}/lib/*  ${LIBCARLA_SERVER_INSTALL_DIR}/lib
    COMMAND cp -R ${CHRONO_SERVER_INSTALL_DIR}/lib/*  ${LIBCARLA_SERVER_INSTALL_DIR}/lib
)
